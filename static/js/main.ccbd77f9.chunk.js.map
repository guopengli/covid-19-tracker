{"version":3,"sources":["InfoBox.js","util.js","Map.js","Table.js","LineGraph.js","App.js","reportWebVitals.js","index.js"],"names":["InfoBox","title","cases","total","active","isRed","props","Card","onClick","className","CardContent","Typography","color","gutterBottom","casesTypeColors","hex","multiplier","recovered","deaths","sortData","data","sortedData","sort","a","b","prettyPrintStat","stat","numeral","format","showDataOnMap","casesType","map","country","Circle","center","countryInfo","lat","long","fillColor","fillOpacity","radius","Math","sqrt","Popup","style","backgroundImage","flag","Map","countries","zoom","console","log","TileLayer","url","attribution","Table","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","useState","setData","useEffect","fetch","then","response","json","fetchData","length","datasets","backgroundColor","borderColor","App","setCountries","setInputCountry","setCountryInfo","tableData","setTableData","mapZoom","setMapZoom","lng","mapCenter","setMapCenter","mapCountries","setMapCountries","setCasesType","name","iso2","getCountriesData","onCountryChange","e","countryCode","target","FormControl","Select","variant","onChange","MenuItem","todayCases","todayRecovered","todayDeaths","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ccbd77f9.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Card, CardContent, Typography } from \"@material-ui/core\";\r\nimport \"./InfoBox.css\";\r\n\r\nfunction InfoBox({ title, cases, total, active, isRed, ...props }) {\r\n  return (\r\n    <Card\r\n      onClick={props.onClick}\r\n      className={`infoBox ${active && \"infoBox--selected\"} ${\r\n        isRed && \"infoBox--red\"\r\n      }`}\r\n    >\r\n      <CardContent>\r\n        <Typography color=\"textSecondary\" gutterBottom>\r\n          {title}\r\n        </Typography>\r\n        <h2 className={`infoBox__cases ${!isRed && \"infoBox__cases--green\"}`}>\r\n          {cases}\r\n        </h2>\r\n\r\n        <Typography className=\"infoBox__total\" color=\"textSecondary\">\r\n          {total} Total\r\n        </Typography>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default InfoBox;","import React from \"react\";\r\nimport numeral from \"numeral\";\r\nimport { Circle, Popup } from \"react-leaflet\";\r\n\r\nconst casesTypeColors = {\r\n  cases: {\r\n    hex: \"#CC1034\",\r\n    // rgb: \"rgb(204, 16, 52)\",\r\n    // half_op: \"rgba(204, 16, 52, 0.5)\",\r\n    multiplier: 300,\r\n  },\r\n  recovered: {\r\n    hex: \"#7dd71d\",\r\n    // rgb: \"rgb(125, 215, 29)\",\r\n    // half_op: \"rgba(125, 215, 29, 0.5)\",\r\n    multiplier: 200,\r\n  },\r\n  deaths: {\r\n    hex: \"#fb4443\",\r\n    // rgb: \"rgb(251, 68, 67)\",\r\n    // half_op: \"rgba(251, 68, 67, 0.5)\",\r\n    multiplier: 800,\r\n  },\r\n};\r\n\r\nexport const sortData = (data) => {\r\n  let sortedData = [...data];\r\n  sortedData.sort((a, b) => { \r\n    if (a.cases > b.cases) {\r\n      return -1;\r\n    } else {\r\n      return 1;\r\n    }\r\n  });\r\n  return sortedData;\r\n};\r\n\r\nexport const prettyPrintStat = (stat) =>\r\n  stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\r\n\r\n\r\n\r\n// Draw circle on the map with interactive tooltop\r\nexport const showDataOnMap = (data, casesType = \"cases\") =>\r\n  data.map((country) => (\r\n    <Circle\r\n      center={[country.countryInfo.lat, country.countryInfo.long]}\r\n      color={casesTypeColors[casesType].hex}\r\n      fillColor={casesTypeColors[casesType].hex}\r\n      fillOpacity={0.4}\r\n      radius={\r\n        Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\r\n      }\r\n    >\r\n      <Popup>\r\n        <div className=\"info-container\">\r\n            <div\r\n              className=\"info-flag\"\r\n              style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\r\n            ></div>\r\n            <div className=\"info-name\">{country.country}</div>\r\n            <div className=\"info-confirmed\">\r\n              Cases: {numeral(country.cases).format(\"0,0\")}\r\n            </div>\r\n            <div className=\"info-recovered\">\r\n              Recovered: {numeral(country.recovered).format(\"0,0\")}\r\n            </div>\r\n            <div className=\"info-deaths\">\r\n              Deaths: {numeral(country.deaths).format(\"0,0\")}\r\n            </div>\r\n         </div>      \r\n      </Popup>\r\n    </Circle>\r\n  ));","import React from 'react';\r\nimport \"./Map.css\";\r\nimport { Map as LeafletMap,TileLayer} from \"react-leaflet\";\r\nimport { showDataOnMap } from \"./util\";\r\n\r\n\r\nfunction Map( {countries, casesType, center, zoom}) {\r\n  console.log(casesType)\r\n\r\n    return (\r\n      <div className=\"map\">\r\n        <LeafletMap center={center} zoom={zoom}>\r\n            <TileLayer\r\n                url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n            />\r\n            {showDataOnMap(countries,casesType)}\r\n\r\n        </LeafletMap>\r\n\r\n      </div>\r\n    );\r\n  }\r\n\r\nexport default Map;\r\n","import React from \"react\";\r\nimport \"./Table.css\";\r\nimport numeral from \"numeral\";\r\n\r\nfunction Table({ countries }) {\r\n  return (\r\n    <div className=\"table\">\r\n      {countries.map((country) => (\r\n        <tr>\r\n          <td>{country.country}</td>\r\n          <td>\r\n            <strong>{numeral(country.cases).format(\"0,0\")}</strong>\r\n          </td>\r\n        </tr>\r\n        \r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Table;","import React, { useState, useEffect } from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport numeral from \"numeral\";\r\n\r\nconst options = {\r\n  legend: {\r\n    display: false,\r\n  },\r\n  elements: {\r\n    point: {\r\n      radius: 0,\r\n    },\r\n  },\r\n  maintainAspectRatio: false,\r\n  tooltips: {\r\n    mode: \"index\",\r\n    intersect: false,\r\n    callbacks: {\r\n      label: function (tooltipItem, data) {\r\n        return numeral(tooltipItem.value).format(\"+0,0\");\r\n      },\r\n    },\r\n  },\r\n  scales: {\r\n    xAxes: [\r\n      {\r\n        type: \"time\",\r\n        time: {\r\n          format: \"MM/DD/YY\",\r\n          tooltipFormat: \"ll\",\r\n        },\r\n      },\r\n    ],\r\n    yAxes: [\r\n      {\r\n        gridLines: {\r\n          display: false,\r\n        },\r\n        ticks: {\r\n          // Include a dollar sign in the ticks\r\n          callback: function (value, index, values) {\r\n            return numeral(value).format(\"0a\");\r\n          },\r\n        },\r\n      },\r\n    ],\r\n  },\r\n};\r\n\r\nconst buildChartData = (data, casesType) => {\r\n  let chartData = [];\r\n  let lastDataPoint;\r\n  for (let date in data.cases) {\r\n    if (lastDataPoint) {\r\n      let newDataPoint = {\r\n        x: date,\r\n        y: data[casesType][date] - lastDataPoint,\r\n      };\r\n      chartData.push(newDataPoint);\r\n    }\r\n    lastDataPoint = data[casesType][date];\r\n  }\r\n  return chartData;\r\n};\r\n\r\nfunction LineGraph({ casesType}) {\r\n  const [data, setData] = useState({});\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120 \")\r\n        .then((response) => {\r\n          return response.json();\r\n        })\r\n        .then((data) => {\r\n          let chartData = buildChartData(data, casesType);\r\n          setData(chartData);\r\n          console.log(chartData);\r\n          // buildChart(chartData);\r\n        });\r\n    };\r\n\r\n    fetchData();\r\n  }, [casesType]);\r\n\r\n  return (\r\n    <div>\r\n      {data?.length > 0 && (\r\n        <Line\r\n          data={{\r\n            datasets: [\r\n              {\r\n                backgroundColor: \"rgba(204, 16, 52, 0.5)\",\r\n                borderColor: \"#CC1034\",\r\n                data: data,\r\n              },\r\n            ],\r\n          }}\r\n          options={options}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LineGraph;","import React, { useState, useEffect } from \"react\";\nimport {\n  MenuItem,\n  FormControl,\n  Select,\n  Card,\n  CardContent,\n} from \"@material-ui/core\";\n\nimport './App.css';\nimport InfoBox from \"./InfoBox\";\nimport Map from \"./Map\";\nimport Table from \"./Table\";\nimport {sortData,  prettyPrintStat} from \"./util\";\nimport LineGraph from \"./LineGraph\";\nimport numeral from \"numeral\";\n\nimport \"leaflet/dist/leaflet.css\";\n\n\nfunction App() {\n\n  const [countries, setCountries] = useState([]);\n  const [country, setInputCountry] = useState(\"worldwide\");\n  const [countryInfo, setCountryInfo] = useState({});\n  const [tableData, setTableData] = useState([]);\n  // map\n  const [mapZoom, setMapZoom] = useState(3);\n  const [mapCenter, setMapCenter] = useState({ lat: 34.80746, lng: -40.4796 });\n  // map info\n  const [mapCountries, setMapCountries] = useState([]);\n  // \n  const [casesType, setCasesType] = useState(\"cases\");\n\n  useEffect(() => {\n    fetch(\"https://disease.sh/v3/covid-19/all\")\n      .then((response) => response.json())\n      .then((data) => {\n        setCountryInfo(data);\n      });\n  }, []);\n\n\n  useEffect(() => {\n    // these code run only once \n    // async -> send request, wait for it , do something  \n    const getCountriesData = async () => {\n      fetch(\"https://disease.sh/v3/covid-19/countries\")\n        .then((response) => response.json())\n        .then((data) => {\n          const countries = data.map((country) => ({\n            // return object\n            name: country.country,\n            value: country.countryInfo.iso2,\n          }));\n          let sortedData = sortData(data);\n          setCountries(countries);\n          setMapCountries(data);\n          setTableData(sortedData);\n        });\n    };\n    getCountriesData();\n  }, []);\n\n  const onCountryChange = async (e) => {\n    const countryCode = e.target.value;\n    setInputCountry(countryCode);\n    const url =\n      countryCode === \"worldwide\"\n        ? \"https://disease.sh/v3/covid-19/all\"\n        : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n    await fetch(url)\n      .then((response) => response.json())\n      .then((data) => {\n        setInputCountry(countryCode);\n        // all data from the country  \n        setCountryInfo(data);\n        setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n        setMapZoom(4);\n      });\n  };\n\n  return (\n    <div className=\"app\">\n      <div className=\"app__left\">\n\n        {/*Header */}\n        <div className=\"app__header\">\n        <h1>COVID-19 TRACKER</h1>\n          <FormControl className=\"app__dropdown\">\n            <Select\n                  variant=\"outlined\"\n                  value={country}\n                  onChange={onCountryChange}\n            >\n              <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n              {countries.map((country) => (\n                <MenuItem value={country.value}>{country.name}</MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n        </div>\n\n          {/*Title + Select input dropdown field */}\n          <div className=\"app__stats\">\n              <InfoBox\n                onClick={(e) => setCasesType(\"cases\")}\n                title=\"Coronavirus Cases\"\n                isRed\n                active={casesType === \"cases\"}\n                cases={prettyPrintStat(countryInfo.todayCases)}\n                total={prettyPrintStat(countryInfo.cases)}\n                // total={numeral(countryInfo.cases).format(\"0.0a\")}\n              />\n              <InfoBox\n                onClick={(e) => setCasesType(\"recovered\")}\n                title=\"Recovered\"\n                active={casesType === \"recovered\"}\n                cases={prettyPrintStat(countryInfo.todayRecovered)}\n                total={prettyPrintStat(countryInfo.recovered)}\n                // total={numeral(countryInfo.recovered).format(\"0.0a\")}\n              />\n              <InfoBox\n                onClick={(e) => setCasesType(\"deaths\")}\n                title=\"Deaths\"\n                isRed\n                active={casesType === \"deaths\"}\n                cases={prettyPrintStat(countryInfo.todayDeaths)}\n                total={prettyPrintStat(countryInfo.deaths)}\n\n                // cases={prettyPrintStat(countryInfo.todayDeaths)}\n                // total={numeral(countryInfo.deaths).format(\"0.0a\")}\n              />\n          </div>\n          {/*Map */}\n\n          <Map\n            countries={mapCountries}\n            casesType={casesType}\n            center={mapCenter}\n            zoom={mapZoom}\n        />\n        </div>\n        <Card className=\"app__right\">\n\n          <CardContent>\n          <div className=\"app__information\">\n\n            {/*Table */}\n\n            <h3>Live Cases by Country</h3>\n            {/* <Table countries={tableData} /> */}\n            <Table countries={tableData} />\n            {/*Graph */}\n            <h3>Worldwide new {casesType}</h3>\n            {/* <LineGraph casesType={casesType} /> */}\n            <LineGraph casesType={casesType} />\n          </div>\n        </CardContent>\n        \n        </Card>\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}